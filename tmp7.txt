Keyword int in line 3
Header file completed
main main in line 3
Opening brackets ( in line 3
Closing brackets ) in line 3
Opening braces { in line 4
Keyword int in line 5
Identifier a in line 5
Inside new symbol table for global
Assignment operator = in line 5
Number 10 in line 5
Error * in line 5
Number 10 in line 5
Increment Operator - in line 5
Number 10 in line 5
SEMI ; in line 5
Keyword int in line 6
Identifier b in line 6
Inside new symbol table for global
Assignment operator = in line 6
Number 20 in line 6
Error * in line 6
Identifier a in line 6
Identifier a found with scope 0
Current scope count 0
SEMI ; in line 6
while: while
Opening brackets ( in line 7
Identifier a in line 7
Identifier a found with scope 0
Current scope count 0
Relational Operator < in line 7
Identifier b in line 7
Identifier b found with scope 0
Current scope count 0
Closing brackets ) in line 7
Relational exp called
var: a
relop: <
reg name: b
Opening braces { in line 8
while: while
Opening brackets ( in line 9
Identifier a in line 9
Identifier a found with scope 0
Current scope count 1
Inside new symbol table for local
Relational Operator < in line 9
Identifier b in line 9
Identifier b found with scope 0
Current scope count 1
Inside new symbol table for local
Closing brackets ) in line 9
Relational exp called
var: a
relop: <
reg name: b
Opening braces { in line 9
Identifier a in line 10
Identifier a found with scope 0
Current scope count 2
Inside new symbol table for local
Assignment operator = in line 10
Identifier a in line 10
Identifier a found with scope 0
Current scope count 2
Inside new symbol table for local
Increment Operator + in line 10
Number 1 in line 10
SEMI ; in line 10
Inside Assignment
Closing braces } in line 11
Identifier b in line 12
Identifier b found with scope 0
Current scope count 1
Inside new symbol table for local
Assignment operator = in line 12
Number 20 in line 12
SEMI ; in line 12
Inside Assignment
Closing braces } in line 13
Keyword int in line 14
Identifier c in line 14
Inside new symbol table for global
Assignment operator = in line 14
Number 20 in line 14
SEMI ; in line 14
Closing braces } in line 15

Preorder Traversal 
PROGRAM int STATEMENT = Type int a - * 10 10 10 STATEMENT = Type int b * 20 a STATEMENT while < a b STATEMENT while < a b = a + a 1 = b 20 = Type int c 20 
Inorder Traversal 
int PROGRAM int Type a = 10 * 10 - 10 STATEMENT int Type b = 20 * a STATEMENT a < b while a < b while a = a + 1 STATEMENT b = 20 STATEMENT int Type c = 20 
Postorder Traversal 
int int a Type 10 10 * 10 - = int b Type 20 a * = a b < a b < a a 1 + = while b 20 = STATEMENT while int c Type 20 = STATEMENT STATEMENT STATEMENT PROGRAM 
Result of parse: 0
				 Symbol Table 				

	Varibale Name	|	Value	|	Type	|	Scope	
	-----------------------------------------------------------------------
		a	|	90	|	int	|	GLOBAL	
		b	|	1800	|	int	|	GLOBAL	
		a	|	0	|		|	LOCAL	
		b	|	20	|	int	|	LOCAL	
		a	|	1	|	int	|	LOCAL	
		a	|	0	|		|	LOCAL	
		b	|	0	|		|	LOCAL	
		c	|	20	|	int	|	GLOBAL	

				 Quadruples 				

	pos	|	op	|	arg1	|	arg2	|	result	
	------------------------------------------------------------------------
	0	|	*	|	10	|	10	|	r0	
	1	|	-	|	r0	|	10	|	r1	
	2	|	=	|	90	|		|	a	
	3	|	*	|	20	|	a	|	r2	
	4	|	=	|	1800	|		|	b	
	5	|	<	|	a	|	b	|		
	6	|	<	|	a	|	b	|		
	7	|	+	|	a	|	1	|	r3	
	8	|	=	|	r3	|		|	a	
	9	|	=	|	20	|		|	b	
	10	|	=	|	20	|		|	c	



main:
r0 = 10 * 10
r1 = r0 - 10
a = 90
r2 = 20 * a
b = 1800
L1:
 if(!(a<b)) goto L2
L3:
 if(!(a<b)) goto L4
r3 = a + 1
a = r3
goto L3
L4:
b = 20
goto L1
L2:
c = 20


				 Quadruples 				

	pos	|	op	|	arg1	|	arg2	|	result	
	------------------------------------------------------------------------
	0	|	L	|		|		|	main	
	1	|		|	100	|		|	r0	
	2	|		|	100-10	|		|	r1	
	3	|		|	90	|		|	a	
	4	|		|	20*90	|		|	r2	
	5	|		|	1800	|		|	b	
	6	|	L	|		|		|	L1	
	7	|	if	|	a<b	|		|	L2	
	8	|	L	|		|		|	L3	
	9	|	if	|	a<b	|		|	L4	
	10	|		|	90+1	|		|	r3	
	11	|		|	r3	|		|	a	
	12	|	goto	|		|		|	L3	
	13	|	L	|		|		|	L4	
	14	|		|	20	|		|	b	
	15	|	goto	|		|		|	L1	
	16	|	L	|		|		|	L2	
	17	|		|	20	|		|	c	



				 Optimized Code 				
main:
a = 90  
b = 1800  
L1:
if(!(a<b)) goto L2
L3:
if(!(a<b)) goto L4
a = 90+1  
goto L3
L4:
b = 20  
goto L1
L2:
c = 20  




Eliminated intermediate variables
r0 = 100
r1 = 100-10
r2 = 20*90
r3 = 90+1
